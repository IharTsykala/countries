{"version":3,"sources":["shared/constants/user-from-view-mode.enum.ts","Redux/store/Locale/Locale.action.ts","Redux/store/Locale/Locale.reduser.ts","Redux/store/Request/Request.action.ts","Redux/store/Request/Request.reduser.ts","Redux/store/Input/Input.action.ts","Redux/store/Input/Input.reduser.ts","Redux/store/Modal/Modal.action.ts","Redux/store/Modal/Modal.reduser.ts","Redux/store/Styles/Styles.action.ts","Redux/store/Styles/Styles.reduser.ts","Redux/store/Loading/Loading.actions.ts","Redux/store/Loading/Loading.reducer.ts","Redux/index.ts","services/service-request.ts","Redux/store/Request/Request.sagas.ts","Components/ModalWindow/ModalWindow.tsx","Components/Navbar/NavbarRequests/NavbarRequestRender/NavbarRequestRender.tsx","Components/Navbar/NavbarRequests/NavbarRequests.tsx","Components/Navbar/NavbarVersion/NavbarVersionLanguage/NavbarMakeStyles.tsx","Components/Navbar/NavbarVersion/NavbarVersionLanguage/NavbarVersionLanguage.tsx","Components/Navbar/NavbarVersion/NavbarVersionZoom/NavbarVersionZoom.tsx","Components/Navbar/NavbarVersion/NavbarVersion.tsx","Components/Navbar/Navbar.tsx","Components/ListRequests/CardRequest/CardRequest.tsx","Components/ListRequests/ListRequests.tsx","Components/ResponseInfo/ListCountries/arrayClues.ts","Components/ResponseInfo/ListCountries/CardCountries/CardCountries.tsx","Components/ResponseInfo/ListCountries/ListCountries.tsx","Components/ResponseInfo/ResponseInfo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingState","ActionTypes","setLocaleInReducer","locale","type","payload","initialState","setInfoAboutCountriesInStore","listCountries","getFailureAction","error","currentRequestId","infoAboutRequestCountry","countryForModalWindow","setInputValueInReducer","value","inputValue","setModalValueInReducer","modalValue","fontSize","setLoadingState","loadingState","combineReducers","state","action","request","input","modal","styles","loading","axios","require","ServiceRequest","solutionLocalStorage","link","a","localStorage","getItem","JSON","parse","get","setItem","stringify","data","console","log","response","message","getInfoAboutAllCountries","getInfoCountryByShortName","name","getInfoCountryByFullName","getInfoCountryByCode","code","getInfoCountryByCurrency","currency","getInfoAboutAllCountriesSaga","getInfoCountryByShortNameSaga","getInfoCountryByFullNameSaga","getInfoCountryByCodeSaga","getInfoCountryByCurrencySaga","requestSaga","put","Loading","Loaded","NotFound","Error","actions","takeEvery","connect","dispatch","Box","component","className","onClick","e","Typography","variant","stopPropagation","NavbarRequestRender","handlerDispatchRequest","handlerInputSearchBox","Toolbar","InputBase","placeholder","disabled","onInput","onKeyPress","useEffect","key","target","useStyles","makeStyles","theme","createStyles","select","borderColor","color","icon","fill","NavbarVersionLanguage","classes","localeStorage","FormControl","Select","inputProps","onChange","handleChange","MenuItem","NavbarVersionZoom","Button","ListRequests","AppBar","CardRequest","item","id","currentRequest","ListItem","Divider","arrayRequests","display","List","map","index","arrayClues","button","country","ListItemAvatar","Avatar","alt","src","flag","ListItemText","primary","secondary","alpha2Code","alpha3Code","currencies","ListCountries","length","CircularProgress","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","ScopedCssBaseline","Navbar","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mHAAYA,E,uFCECC,EACY,iCAGZC,EAAqB,SAACC,GAAD,MAAqC,CACrEC,KAAMH,EACNI,QAASF,ICDLG,EAAsB,CAC1BH,OAAQ,MCNGF,EACsB,4CADtBA,EAGkB,uCAHlBA,EAIqB,2CAJrBA,EAMT,0CANSA,EAQe,qCARfA,EASmB,yCATnBA,EAWT,8CAXSA,EAamB,yCAbnBA,EAeE,2BAmCFM,EAA+B,SAC1CC,GAD0C,MAE1B,CAChBJ,KAAMH,EACNI,QAASG,IAUEC,EAAmB,SAACC,GAAD,MAA+B,CAC7DN,KAAMH,EACNI,QAASK,IC3DLJ,EAAsB,CAC1BK,iBAAkB,EAClBC,wBAAyB,GACzBC,sBAAuB,ICVZZ,EACiB,qCAGjBa,EAAyB,SAACC,GAAD,MAAoC,CACxEX,KAAMH,EACNI,QAASU,ICDLT,EAAsB,CAC1BU,WAAY,ICNDf,EACiB,qCAGjBgB,EAAyB,SAACF,GAAD,MAAsC,CAC1EX,KAAMH,EACNI,QAASU,ICDLT,EAAsB,CAC1BY,YAAY,GCNDjB,EACa,iCCIpBK,EAAsB,CAC1Ba,UAAU,GCNClB,EACQ,8BAGRmB,EAAkB,SAACC,GAAD,MAA2C,CACxEjB,KAAMH,EACNI,QAASgB,ICDLf,EAAsB,CAC1Be,aAAc,UCADC,4BAAgB,CAC7BnB,OXE2B,WAGvB,IAFJoB,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBpB,OAAQqB,EAAOnB,UACpC,QACE,OAAOkB,IWTTE,QTK4B,WAGxB,IAFJF,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBZ,iBAAkBa,EAAOnB,UAC9C,KAAKJ,EACH,OAAO,eAAKsB,EAAZ,CAAmBX,wBAAyBY,EAAOnB,UACrD,KAAKJ,EACH,OAAO,eAAKsB,EAAZ,CAAmBV,sBAAuBW,EAAOnB,UACnD,QACE,OAAOkB,IShBTG,MPA0B,WAGtB,IAFJH,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBP,WAAYQ,EAAOnB,UACxC,QACE,OAAOkB,IOPTI,MLD0B,WAGtB,IAFJJ,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBL,WAAYM,EAAOnB,UACxC,QACE,OAAOkB,IKNTK,OHF2B,WAGvB,IAFJL,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBJ,SAAUK,EAAOnB,UACtC,QACE,OAAOkB,IGLTM,QDH4B,WAGxB,IAFJN,EAEG,uDAFYjB,EACfkB,EACG,uCACH,OAAQA,EAAOpB,MACf,KAAKH,EACH,OAAO,eAAKsB,EAAZ,CAAmBF,aAAcG,EAAOnB,UAC1C,QACE,OAAOkB,M,wCEnBLO,EAAQC,EAAQ,KAEDC,E,kCAAAA,EACZC,qB,uCAAuB,WAAOC,GAAP,eAAAC,EAAA,mEAEtBC,aAAaC,QAAQH,GAFC,yCAGjBI,KAAKC,MAAMH,aAAaC,QAAQH,IAAS,OAHxB,uBAKFJ,EAAMU,IAAIN,GALR,cAKlBT,EALkB,OAMxBW,aAAaK,QAAQP,EAAMI,KAAKI,UAAUjB,EAAQkB,OAN1B,kBAOjBlB,EAAQkB,MAPS,gEAU1BC,QAAQC,IAAR,MACM,KAAEC,SAASH,KAAKI,QAXI,0D,sDADXf,EAgBZgB,yB,sBAA2B,sBAAAb,EAAA,+EAhBfH,EAmBGC,qBAChB,wCAJ4B,8EAO9BW,QAAQC,IAAR,MAP8B,8DAhBfb,EA4BZiB,0B,uCAA4B,WAAOC,GAAP,SAAAf,EAAA,+EA5BhBH,EA+BGC,qBAAL,gDAC8BiB,IAJZ,8EAO/BN,QAAQC,IAAR,MAP+B,8D,sDA5BhBb,EAwCZmB,yB,uCAA2B,WAAOD,GAAP,SAAAf,EAAA,+EAxCfH,EA2CGC,qBAAL,gDAC8BiB,EAD9B,mBAHiB,8EAO9BN,QAAQC,IAAR,MAP8B,8D,sDAxCfb,EAoDZoB,qB,uCAAuB,WAAOC,GAAP,SAAAlB,EAAA,+EApDXH,EAuDGC,qBAAL,iDAC+BoB,IAJlB,8EAO1BT,QAAQC,IAAR,MAP0B,8D,sDApDXb,EAgEZsB,yB,uCAA2B,WAAOC,GAAP,SAAApB,EAAA,+EAhEfH,EAmEGC,qBAAL,oDACkCsB,IAJjB,8EAO9BX,QAAQC,IAAR,MAP8B,8D,+DdlExB7C,K,kBAAAA,E,gBAAAA,E,oBAAAA,E,eAAAA,M,oBeUFwD,G,WAaAC,I,WAeAC,I,WAcAC,I,WAeAC,I,WAgBeC,IAzEzB,SAAUL,IAAV,uEAEI,OAFJ,kBAEUM,YAAI1C,EAAgBpB,EAAa+D,UAF3C,OAG0B,OAH1B,SAGgC/B,EAAegB,2BAH/C,OAII,OADMxC,EAHV,gBAIUsD,YAAIvD,EAA6BC,IAJ3C,OAKI,OALJ,UAKUsD,YAAI1C,EAAgBpB,EAAagE,SAL3C,6DAOc,cAAN,KAPR,iBAO2B,OAP3B,UAOiCF,YAAI1C,EAAgBpB,EAAaiE,WAPlE,gCAQS,OART,UAQeH,YAAI1C,EAAgBpB,EAAakE,QARhD,QASI,OATJ,UASUJ,YAAIrD,EAAiB,EAAD,KAT9B,sDAaA,SAAUgD,GAA8BU,GAAxC,uEAEI,OAFJ,kBAEUL,YAAI1C,EAAgBpB,EAAa+D,UAF3C,OAG0B,OAH1B,SAGgC/B,EAAeiB,0BACzCkB,EAAQ9D,SAJd,OAMI,OAHMG,EAHV,gBAMUsD,YAAIvD,EAA6BC,IAN3C,OAOI,OAPJ,UAOUsD,YAAI1C,EAAgBpB,EAAagE,SAP3C,6DASc,cAAN,KATR,iBAS2B,OAT3B,UASiCF,YAAI1C,EAAgBpB,EAAaiE,WATlE,gCAUS,OAVT,UAUeH,YAAI1C,EAAgBpB,EAAakE,QAVhD,QAWI,OAXJ,UAWUJ,YAAIrD,EAAiB,EAAD,KAX9B,sDAeA,SAAUiD,GAA6BS,GAAvC,uEAE0B,OAF1B,kBAEgCnC,EAAemB,yBACzCgB,EAAQ9D,SAHd,OAKI,OAHMG,EAFV,gBAKUsD,YAAIvD,EAA6BC,IAL3C,OAMI,OANJ,SAMUsD,YAAI1C,EAAgBpB,EAAagE,SAN3C,4DAQc,cAAN,KARR,iBAQ2B,OAR3B,UAQiCF,YAAI1C,EAAgBpB,EAAaiE,WARlE,gCASS,OATT,UASeH,YAAI1C,EAAgBpB,EAAakE,QAThD,QAUI,OAVJ,UAUUJ,YAAIrD,EAAiB,EAAD,KAV9B,sDAcA,SAAUkD,GAAyBQ,GAAnC,uEAEI,OAFJ,kBAEUL,YAAI1C,EAAgBpB,EAAa+D,UAF3C,OAG0B,OAH1B,SAGgC/B,EAAeoB,qBACzCe,EAAQ9D,SAJd,OAMI,OAHMG,EAHV,gBAMUsD,YAAIvD,EAA6B,CAACC,KAN5C,OAOI,OAPJ,UAOUsD,YAAI1C,EAAgBpB,EAAagE,SAP3C,6DASc,cAAN,KATR,iBAS2B,OAT3B,UASiCF,YAAI1C,EAAgBpB,EAAaiE,WATlE,gCAUS,OAVT,UAUeH,YAAI1C,EAAgBpB,EAAakE,QAVhD,QAWI,OAXJ,UAWUJ,YAAIrD,EAAiB,EAAD,KAX9B,sDAeA,SAAUmD,GAA6BO,GAAvC,uEAEI,OAFJ,kBAEUL,YAAI1C,EAAgBpB,EAAa+D,UAF3C,OAG0B,OAH1B,SAGgC/B,EAAesB,yBACzCa,EAAQ9D,SAJd,OAMI,OAHMG,EAHV,gBAMUsD,YAAIvD,EAA6BC,IAN3C,OAOI,OAPJ,UAOUsD,YAAI1C,EAAgBpB,EAAagE,SAP3C,6DASc,cAAN,KATR,iBAUM,OAVN,UAUYF,YAAI1C,EAAgBpB,EAAaiE,WAV7C,gCAWW,OAXX,UAWiBH,YAAI1C,EAAgBpB,EAAakE,QAXlD,QAYI,OAZJ,UAYUJ,YAAIrD,EAAiB,EAAD,KAZ9B,sDAgBe,SAAUoD,KAAV,iEACb,OADa,SACPO,YACJnE,EACAuD,GAHW,OAKb,OALa,SAKPY,YACJnE,EACAwD,IAPW,OASb,OATa,SASPW,YACJnE,EACAyD,IAXW,OAab,OAba,SAaPU,YACJnE,EACA0D,IAfW,OAiBb,OAjBa,UAiBPS,YACJnE,EACA2D,IAnBW,wC,uBCpBAS,gBAPS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,SACvBD,WAAYK,EAAMI,MAAMT,WACxBL,sBAAuBU,EAAME,QAAQZ,yBAGxBwD,EAlDgD,SAAC,GAMzD,IALLlE,EAKI,EALJA,OACAgB,EAII,EAJJA,SACAD,EAGI,EAHJA,WACAL,EAEI,EAFJA,sBACAyD,EACI,EADJA,SAEA,OACE,oCACGpD,GACC,kBAACqD,GAAA,EAAD,CACEC,UAAW,MACXC,UAAS,2BACTC,QAAS,SAACC,GAAD,OAAOL,EAASrD,GAAuB,MAEhD,kBAAC2D,GAAA,EAAD,CACEC,QAAQ,KACRJ,UAAS,oCACNtD,EAAY,gBAAoB,qBAGtB,OAAXhB,EAAmB,uCACnB,8OAEJ,kBAACoE,GAAA,EAAD,CACEC,UAAW,MACXC,UAAW,iCACXC,QAAS,SAACC,GAAD,OAAOA,EAAEG,oBAElB,6BACE,0BACEL,UAAYtD,EAAY,gBAAoB,oBAE3CmB,KAAKI,UAAU7B,EAAuB,KAAM,W,kDCA9CkE,GAjCgE,SAAC,GAOzE,IANL5E,EAMI,EANJA,OACAgB,EAKI,EALJA,SACAR,EAII,EAJJA,iBACAK,EAGI,EAHJA,WACAgE,EAEI,EAFJA,uBACAC,EACI,EADJA,sBAEA,OACE,kBAACC,GAAA,EAAD,CAAST,UAAW,8BAClB,kBAAC,KAAD,CACEA,UAAW,0CACXC,QAAS,kBAAMM,OAEjB,kBAACG,GAAA,EAAD,CACEpE,MAAOC,EACPoE,aACIzE,IACa,OAAXR,EAAmB,gBAAoB,0FAC/B,OAAXA,GAAmB,cACpB,kFAEFsE,UAAS,4CACNtD,EAAY,gBAAoB,oBAEnCkE,UAAY1E,EACZ2E,QAAS,SAACX,GAAD,OAAOM,EAAsBN,IACtCY,WAAY,SAACZ,GAAD,OAAOK,EAAuBL,QCoCnCN,gBAPS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,SACvBR,iBAAkBY,EAAME,QAAQd,iBAChCK,WAAYO,EAAMG,MAAMV,cAGXqD,EAxDsD,SAAC,GAM/D,IALLlE,EAKI,EALJA,OACAgB,EAII,EAJJA,SACAR,EAGI,EAHJA,iBACAK,EAEI,EAFJA,WACAsD,EACI,EADJA,SAEAkB,qBAAU,WACH7E,GAAkB2D,EfAgC,CACzDlE,KAAMH,MeAH,CAACU,EAAkB2D,IA4BtB,OACE,kBAAC,GAAD,CACEnE,OAAQA,EACRgB,SAAUA,EACVR,iBAAkBA,EAClBK,WAAYA,EACZgE,uBA5B2B,SAACL,GAC9B,IAAKA,GAAe,UAAVA,EAAEc,IAAiB,CAC3B,OAAQ9E,GACN,KAAK,EACH2D,EfPkE,CAC1ElE,KAAMH,EACNI,QeK2CW,IACnC,MACF,KAAK,EACHsD,EfL8B,SAACpB,GAAD,MAAmC,CACzE9C,KAAMH,EACNI,QAAS6C,GeGQC,CAAyBnC,IAClC,MACF,KAAK,EACHsD,EfH6D,CACrElE,KAAMH,EACNI,QeCsCW,IAC9B,MACF,KAAK,EACHsD,EfDqE,CAC7ElE,KAAMH,EACNI,QeD0CW,IAClC,MACF,QACE,OAEJsD,EAASxD,EAAuB,OAWhCmE,sBAjC0B,SAACN,GAC7BL,EAASxD,EAAuB6D,EAAEe,OAAO3E,c,kDCX9B4E,GAnBGC,cAAW,SAACC,GAAD,OAC3BC,aAAa,CACXC,OAAQ,CACN,WAAY,CACVC,YAAa,SAEf,QAAS,CACPC,MAAO,SAET,UAAW,CACTD,YAAa,UAGjBE,KAAM,CACJC,KAAM,cC2CGC,GAhDoE,SAAC,GAI7E,IAHLjG,EAGI,EAHJA,OACAgB,EAEI,EAFJA,SACAmD,EACI,EADJA,SAEM+B,EAAUV,KAEhBH,qBAAU,WACR,IAAMc,EAAgBlE,aAAaC,QAAQ,UACvCiE,GAAehC,EAASpE,EAAmBoG,MAC9C,CAAChC,IAOJ,OACE,kBAACiC,GAAA,EAAD,CAAa9B,UAAW,wCACtB,kBAAC+B,GAAA,EAAD,CACE/B,UAAS,UAAK4B,EAAQN,OAAb,YACN5E,EAAY,gBAAoB,oBAEnCsF,WAAY,CACVJ,QAAS,CACPH,KAAMG,EAAQH,OAGlBnF,MAAOZ,EACPuG,SAAU,SAAC/B,GAAD,OAjBK,SAACA,GACpBL,EAASpE,EAAmByE,EAAEe,OAAO3E,QACrCqB,aAAaK,QAAQ,SAAUkC,EAAEe,OAAO3E,OAenB4F,CAAahC,KAE9B,kBAACiC,GAAA,EAAD,CACEnC,UAAYtD,EAAY,gBAAoB,mBAC5CJ,MAAO,MAFT,MAMA,kBAAC6F,GAAA,EAAD,CACEnC,UAAYtD,EAAY,gBAAoB,mBAC5CJ,MAAO,MAFT,S,kDCpBO8F,GAjB4D,SAAC,GAGrE,IAFL1F,EAEI,EAFJA,SACAmD,EACI,EADJA,SAEA,OACE,kBAACwC,GAAA,EAAD,CACEjC,QAAQ,YACRoB,MAAM,UACNvB,QAAS,kBAAMJ,EZbmD,CACtElE,KAAMH,EACNI,SYWgDc,OAEzCA,GACD,kBAAC,KAAD,CAAYsD,UAAW,sCACnB,kBAAC,KAAD,CAAaA,UAAW,uCCWrBJ,gBALS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,YAGVkD,EAtBoD,SAAC,GAI7D,IAHLlE,EAGI,EAHJA,OACAgB,EAEI,EAFJA,SACAmD,EACI,EADJA,SAEA,OACE,kBAACY,GAAA,EAAD,CAAST,UAAW,8BAClB,kBAAC,GAAD,CAAmBtD,SAAUA,EAAUmD,SAAUA,IACjD,kBAAC,GAAD,CACEnE,OAAQA,EACRgB,SAAUA,EACVmD,SAAUA,QCPHyC,GATkD,WAC/D,OACE,kBAACC,GAAA,EAAD,CAAQvC,UAAW,UACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,8BC2CSwC,GAjCgD,SAAC,GAOzD,IANLC,EAMI,EANJA,KACA5C,EAKI,EALJA,SACAnE,EAII,EAJJA,OACAgH,EAGI,EAHJA,GACAC,EAEI,EAFJA,eACAjG,EACI,EADJA,SAEA,OACE,oCACE,kBAACkG,GAAA,EAAD,CAAU5C,UAAS,2BACjB,kBAACqC,GAAA,EAAD,CACEjC,QAAUuC,EAAkB,YAAgB,OAC5CnB,MAAM,UACNvB,QAAS,kBACPJ,ErBdU,CACpBlE,KAAMH,EACNI,QqBY8C8G,KACpC7C,EAASlD,EAAgBpB,EAAagE,UAC/B,IAAPmD,GACA7C,EAAS/D,EAA6B,MAExCkE,UAAYtD,EAAY,gBAAoB,oBAE5C,kBAACyD,GAAA,EAAD,CAAYC,QAAQ,UACL,OAAX1E,EAAmB,gBAAoB,kEAE3C,kBAACyE,GAAA,EAAD,CAAYC,QAAQ,MAAMqC,KAG9B,kBAACI,GAAA,EAAD,CAASzC,QAAQ,QAAQL,UAAU,SC5CnC+C,GAAgB,CACpB,CAAC,MAAO,2DACR,CAAC,OAAQ,iEACT,CAAC,WAAY,2DACb,CAAC,OAAQ,2DACT,CAAC,WAAY,8EAyCAlD,gBANS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,SACvBR,iBAAkBY,EAAME,QAAQd,oBAGnB0D,EA/BkD,SAAC,GAK3D,IAJLlE,EAII,EAJJA,OACAgB,EAGI,EAHJA,SACAR,EAEI,EAFJA,iBACA2D,EACI,EADJA,SAEA,OACE,kBAACC,GAAA,EAAD,CAAKC,UAAU,MAAMgD,QAAQ,OAAO/C,UAAW,2BAC7C,kBAACgD,GAAA,EAAD,CAAMhD,UAAW,iCACd8C,GAAcG,KAAI,SAACR,EAAWS,GAAZ,OACjB,kBAAC,GAAD,CACElC,IAAKkC,EACLT,KAAkB,OAAX/G,GAAmB+G,EAAK,IAAOA,EAAK,GAC3C5C,SAAUA,EACVnE,OAAQA,EACRgH,GAAIQ,EACJP,eAAgBO,IAAUhH,EAC1BQ,SAAUA,Y,UCjBPyG,GApBI,CACjB,CAAC,QAAS,qDACV,CACE,kDACA,6TAEF,CACE,iDACA,iTAEF,CACE,4CACA,8OAEF,CACE,gDACA,iQ,8BCkDWvD,gBAPS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,SACvBP,wBAAyBW,EAAME,QAAQb,wBACvCiB,QAASN,EAAMM,QAAQR,gBAGVgD,EA9CoD,SAAC,GAO7D,IANLlE,EAMI,EANJA,OACAgB,EAKI,EALJA,SACAP,EAII,EAJJA,wBACAsG,EAGI,EAHJA,KACAS,EAEI,EAFJA,MACArD,EACI,EADJA,SAEA,OACE,kBAAC+C,GAAA,EAAD,CACEQ,QAAM,EACNnD,QAAS,WxB8ByB,IAACoD,EwB7BjCxD,EAASrD,GAAuB,KAC9BqD,GxB4B+BwD,EwB5BGlH,EAAwB+G,GxB4BE,CACpEvH,KAAMH,EACNI,QAASyH,MwB5BLrD,UAAW,mCAEX,kBAACsD,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQC,IAAG,UAAaC,IAAKhB,EAAKiB,QAEpC,kBAACC,GAAA,EAAD,CACE3D,UAAYtD,EAAY,gBAAoB,mBAC5CkH,QAASnB,EAAKhE,KACdoF,UAAuB,OAAXnI,EAAmB,eAAmB,0FAEpD,kBAACiI,GAAA,EAAD,CACE3D,UAAYtD,EAAY,gBAAoB,mBAC5CkH,QAAO,UAAKnB,EAAKqB,WAAV,YAAwBrB,EAAKsB,YACpCF,UAAuB,OAAXnI,EAAmB,gBAAoB,kEAErD,kBAACiI,GAAA,EAAD,CACE3D,UAAYtD,EAAY,gBAAoB,mBAC5CkH,QAASnB,EAAKuB,WAAW,GAAGpF,KAC5BiF,UAAuB,OAAXnI,EAAmB,mBAAuB,kFCR/CuI,GAjCoD,SAAC,GAK7D,IAJLvI,EAII,EAJJA,OACAgB,EAGI,EAHJA,SACAP,EAEI,EAFJA,wBACAD,EACI,EADJA,iBAEA,OACE,kBAAC8G,GAAA,EAAD,CAAMjD,UAAW,MAAOC,UAAW,6BAC/B7D,GACAA,EAAwB+H,OAAS,GACjC/H,EAAwB8G,KAAI,SAACR,EAAWS,GAAZ,OAC1B,kBAAC,GAAD,CAAelC,IAAKkC,EAAOT,KAAMA,EAAMS,MAAOA,QAEhD,oCACE,kBAAC/C,GAAA,EAAD,CACEC,QAAS,KACTJ,UAAYtD,EAAY,gBAAoB,oBAE/B,OAAXhB,GAAmByH,GAAWjH,GAAkB,IAChDiH,GAAWjH,GAAkB,IAEX,IAArBA,GACC,kBAACiI,GAAA,EAAD,CACE3C,MAAM,UACNxB,UAAW,+BCoCVJ,gBARS,SAAC9C,GAAD,MAAiB,CACvCpB,OAAQoB,EAAMpB,OAAOA,OACrBgB,SAAUI,EAAMK,OAAOT,SACvBP,wBAAyBW,EAAME,QAAQb,wBACvCD,iBAAkBY,EAAME,QAAQd,iBAChCkB,QAASN,EAAMM,QAAQR,gBAGVgD,EA3DkD,SAAC,GAM3D,IALLlE,EAKI,EALJA,OACAgB,EAII,EAJJA,SACAP,EAGI,EAHJA,wBACAD,EAEI,EAFJA,iBACAkB,EACI,EADJA,QAEA,OACE,oCACgB,YAAZA,GACA,kBAAC0C,GAAA,EAAD,CAAKC,UAAW,OACd,kBAACoE,GAAA,EAAD,CACE3C,MAAM,UACNxB,UAAW,8BAIF,aAAZ5C,GACC,kBAAC+C,GAAA,EAAD,CACEC,QAAS,KACTJ,UAAS,oCACNtD,EAAY,gBAAoB,qBAGtB,OAAXhB,EAAmB,qCACnB,8LAGO,WAAZ0B,GACC,kBAAC,GAAD,CACE1B,OAAQA,EACRgB,SAAUA,EACVP,wBAAyBA,EACzBD,iBAAkBA,KAGT,UAAZkB,GACC,kBAAC+C,GAAA,EAAD,CACEC,QAAQ,KACRJ,UAAS,gCACNtD,EAAY,gBAAoB,qBAGtB,OAAXhB,EAAmB,wBACnB,yL,UC1CR0I,GAAiBC,cAEjBC,GAAQC,sBACZC,EACAC,8BAAoB,CAAEC,OAAO,EAAMC,WAAY,IAA/CF,CACEG,0BAAgBR,MAIpBA,GAAeS,IAAIzF,IAEnB,IAee0F,GAfO,kBACpB,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAACS,GAAA,EAAD,KACE,kBAACjF,GAAA,EAAD,CAAKC,UAAU,MAAMC,UAAW,WAC9B,kBAAC,GAAD,MACA,kBAACgF,GAAD,MACA,kBAAClF,GAAA,EAAD,CAAKC,UAAU,MAAMC,UAAW,QAC9B,kBAAC,GAAD,MACA,kBAAC,GAAD,WCtBUiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,GAASC,SAASC,eAAe,QACvCC,IAASC,OAAO,kBAAC,GAAD,MAASJ,IDoInB,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhK,GACLkC,QAAQlC,MAAMA,EAAMqC,a","file":"static/js/main.00a450bc.chunk.js","sourcesContent":["export enum LoadingState {\r\n  Loading = \"loading\",\r\n  Loaded = \"loaded\",\r\n  NotFound = \"notFound\",\r\n  Error = \"error\",\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LOCALE_IN_REDUCER: \"[Locale] Set locale in reducer\",\r\n}\r\n\r\nexport const setLocaleInReducer = (locale: string): Action<string> => ({\r\n  type: ActionTypes.SET_LOCALE_IN_REDUCER,\r\n  payload: locale,\r\n})\r\n","import { ActionTypes } from \"./Locale.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  locale: string;\r\n}\r\n\r\nconst initialState: State = {\r\n  locale: \"En\",\r\n}\r\n\r\nexport const localeReducer = (\r\n  state: State = initialState,\r\n  action: Action<string>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_LOCALE_IN_REDUCER:\r\n    return { ...state, locale: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_CURRENT_REQUEST_ID_IN_STORE: \"[Request] Set current request id in store\",\r\n\r\n  GET_INFO_ABOUT_ALL_CONTRIES: \"[Request] Get info about all country\",\r\n  GET_INFO_COUNTRY_BY_SHORT_NAME: \"[Request] Get info country by short name\",\r\n  GET_INFO_COUNTRY_BY_SHORT_FULL_NAME:\r\n    \"[Request] Get info country by full name\",\r\n  // GET_INFO_COUNTRY_BY_SOME_CODES: \"[Request] Get info country by some codes\",\r\n  GET_INFO_COUNTRY_BY_CODE: \"[Request] Get info country by code\",\r\n  GET_INFO_COUNTRY_BY_CURRENCY: \"[Request] Get info country by currency\",\r\n  SET_INFO_ABOUT_CONTRIES_IN_STORE:\r\n    \"[Request] Set info about countries in store\",\r\n\r\n  SET_COUNTRY_FOR_MODAL_WINDOW: \"[Request] Set country for modal window\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const setCurrentRequestIdInStore = (\r\n  requestId: number\r\n): Action<number> => ({\r\n  type: ActionTypes.SET_CURRENT_REQUEST_ID_IN_STORE,\r\n  payload: requestId,\r\n})\r\n\r\n// request on server\r\nexport const getInfoAboutAllCountries = (): Action<{}> => ({\r\n  type: ActionTypes.GET_INFO_ABOUT_ALL_CONTRIES,\r\n})\r\n\r\nexport const getInfoCountryByShortName = (name: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_SHORT_NAME,\r\n  payload: name,\r\n})\r\n\r\nexport const getInfoCountryByFullName = (name: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_SHORT_FULL_NAME,\r\n  payload: name,\r\n})\r\n\r\nexport const getInfoCountryByCode = (code: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_CODE,\r\n  payload: code,\r\n})\r\n\r\nexport const getInfoCountryByCurrency = (currency: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_CURRENCY,\r\n  payload: currency,\r\n})\r\n\r\nexport const setInfoAboutCountriesInStore = (\r\n  listCountries: any\r\n): Action<[]> => ({\r\n  type: ActionTypes.SET_INFO_ABOUT_CONTRIES_IN_STORE,\r\n  payload: listCountries,\r\n})\r\n\r\n//ModalWindow\r\n\r\nexport const setCountryForModalWindow = (country: {}): Action<{}> => ({\r\n  type: ActionTypes.SET_COUNTRY_FOR_MODAL_WINDOW,\r\n  payload: country,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { ActionTypes } from \"./Request.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  currentRequestId: number;\r\n  infoAboutRequestCountry: [];\r\n  countryForModalWindow: {};\r\n}\r\n\r\nconst initialState: State = {\r\n  currentRequestId: 0,\r\n  infoAboutRequestCountry: [],\r\n  countryForModalWindow: {},\r\n}\r\n\r\nexport const requestReducer = (\r\n  state: State = initialState,\r\n  action: Action<any>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_CURRENT_REQUEST_ID_IN_STORE:\r\n    return { ...state, currentRequestId: action.payload }\r\n  case ActionTypes.SET_INFO_ABOUT_CONTRIES_IN_STORE:\r\n    return { ...state, infoAboutRequestCountry: action.payload }\r\n  case ActionTypes.SET_COUNTRY_FOR_MODAL_WINDOW:\r\n    return { ...state, countryForModalWindow: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_INPUT_VALUE_IN_REDUCER: \"[Input] Set input value in reducer\",\r\n}\r\n\r\nexport const setInputValueInReducer = (value: string): Action<string> => ({\r\n  type: ActionTypes.SET_INPUT_VALUE_IN_REDUCER,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Input.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  inputValue: string;\r\n}\r\n\r\nconst initialState: State = {\r\n  inputValue: \"\",\r\n}\r\n\r\nexport const inputReducer = (\r\n  state: State = initialState,\r\n  action: Action<string>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_INPUT_VALUE_IN_REDUCER:\r\n    return { ...state, inputValue: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_MODAL_VALUE_IN_REDUCER: \"[Modal] Set modal value in reducer\",\r\n}\r\n\r\nexport const setModalValueInReducer = (value: boolean): Action<boolean> => ({\r\n  type: ActionTypes.SET_MODAL_VALUE_IN_REDUCER,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Modal.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  modalValue: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n  modalValue: false,\r\n}\r\n\r\nexport const modalReducer = (\r\n  state: State = initialState,\r\n  action: Action<boolean>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_MODAL_VALUE_IN_REDUCER:\r\n    return { ...state, modalValue: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_FONT_SIZE_IN_STORE: \"[Modal] Set font size in store\",\r\n}\r\n\r\nexport const setFontSizeInStore = (value: boolean): Action<boolean> => ({\r\n  type: ActionTypes.SET_FONT_SIZE_IN_STORE,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Styles.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  fontSize: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n  fontSize: false,\r\n}\r\n\r\nexport const stylesReducer = (\r\n  state: State = initialState,\r\n  action: Action<boolean>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_FONT_SIZE_IN_STORE:\r\n    return { ...state, fontSize: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LOADING_STATE: \"[Loading] set Loading state\",\r\n}\r\n\r\nexport const setLoadingState = (loadingState: string): Action<string> => ({\r\n  type: ActionTypes.SET_LOADING_STATE,\r\n  payload: loadingState,\r\n})\r\n","import { ActionTypes } from \"./Loading.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  loadingState: string;\r\n}\r\n\r\nconst initialState: State = {\r\n  loadingState: \"loaded\",\r\n}\r\n\r\nexport const loadingReducer = (\r\n  state: State = initialState,\r\n  action: Action<String>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_LOADING_STATE:\r\n    return { ...state, loadingState: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { localeReducer } from \"./store/Locale/Locale.reduser\"\r\nimport { requestReducer } from \"./store/Request/Request.reduser\"\r\nimport { inputReducer } from \"./store/Input/Input.reduser\"\r\nimport { modalReducer } from \"./store/Modal/Modal.reduser\"\r\nimport { stylesReducer } from \"./store/Styles/Styles.reduser\"\r\nimport { loadingReducer } from \"./store/Loading/Loading.reducer\"\r\n\r\nexport default combineReducers({\r\n  locale: localeReducer,\r\n  request: requestReducer,\r\n  input: inputReducer,\r\n  modal: modalReducer,\r\n  styles: stylesReducer,\r\n  loading: loadingReducer,\r\n})\r\n","const axios = require(\"axios\")\r\n\r\nexport default class ServiceRequest {\r\n  static solutionLocalStorage = async (link: string) => {\r\n    try {\r\n      if (localStorage.getItem(link))\r\n        return JSON.parse(localStorage.getItem(link) || \"[]\")\r\n      else {\r\n        const request = await axios.get(link)\r\n        localStorage.setItem(link, JSON.stringify(request.data))\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e.response.data.message\r\n    }\r\n  }\r\n\r\n  static getInfoAboutAllCountries = async () => {\r\n    try {\r\n      // @ts-ignore\r\n      return await this.solutionLocalStorage(\r\n        \"https://restcountries.eu/rest/v2/all\"\r\n      )\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByShortName = async (name: string) => {\r\n    try {\r\n      // @ts-ignore\r\n      return await this.solutionLocalStorage(\r\n        `https://restcountries.eu/rest/v2/name/${name}`\r\n      )\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByFullName = async (name: string) => {\r\n    try {\r\n      // @ts-ignore\r\n      return await this.solutionLocalStorage(\r\n        `https://restcountries.eu/rest/v2/name/${name}?fullText=true`\r\n      )\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByCode = async (code: string) => {\r\n    try {\r\n      // @ts-ignore\r\n      return await this.solutionLocalStorage(\r\n        `https://restcountries.eu/rest/v2/alpha/${code}`\r\n      )\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByCurrency = async (currency: string) => {\r\n    try {\r\n      // @ts-ignore\r\n      return await this.solutionLocalStorage(\r\n        `https://restcountries.eu/rest/v2/currency/${currency}`\r\n      )\r\n    } catch (e) {\r\n      console.log(e)\r\n      throw e\r\n    }\r\n  }\r\n}\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport {\r\n  ActionTypes,\r\n  getFailureAction,\r\n  setInfoAboutCountriesInStore,\r\n} from \"./Request.action\"\r\nimport ServiceRequest from \"../../../services/service-request\"\r\nimport { LoadingState } from \"../../../shared/constants/user-from-view-mode.enum\"\r\nimport { setLoadingState } from \"../Loading/Loading.actions\"\r\n\r\nfunction* getInfoAboutAllCountriesSaga() {\r\n  try {\r\n    yield put(setLoadingState(LoadingState.Loading))\r\n    const listCountries = yield ServiceRequest.getInfoAboutAllCountries()\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n    yield put(setLoadingState(LoadingState.Loaded))\r\n  } catch (e) {\r\n    if (e === \"Not Found\") yield put(setLoadingState(LoadingState.NotFound))\r\n    else yield put(setLoadingState(LoadingState.Error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByShortNameSaga(actions: any) {\r\n  try {\r\n    yield put(setLoadingState(LoadingState.Loading))\r\n    const listCountries = yield ServiceRequest.getInfoCountryByShortName(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n    yield put(setLoadingState(LoadingState.Loaded))\r\n  } catch (e) {\r\n    if (e === \"Not Found\") yield put(setLoadingState(LoadingState.NotFound))\r\n    else yield put(setLoadingState(LoadingState.Error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByFullNameSaga(actions: any) {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoCountryByFullName(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n    yield put(setLoadingState(LoadingState.Loaded))\r\n  } catch (e) {\r\n    if (e === \"Not Found\") yield put(setLoadingState(LoadingState.NotFound))\r\n    else yield put(setLoadingState(LoadingState.Error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByCodeSaga(actions: any) {\r\n  try {\r\n    yield put(setLoadingState(LoadingState.Loading))\r\n    const listCountries = yield ServiceRequest.getInfoCountryByCode(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore([listCountries]))\r\n    yield put(setLoadingState(LoadingState.Loaded))\r\n  } catch (e) {\r\n    if (e === \"Not Found\") yield put(setLoadingState(LoadingState.NotFound))\r\n    else yield put(setLoadingState(LoadingState.Error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByCurrencySaga(actions: any) {\r\n  try {\r\n    yield put(setLoadingState(LoadingState.Loading))\r\n    const listCountries = yield ServiceRequest.getInfoCountryByCurrency(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n    yield put(setLoadingState(LoadingState.Loaded))\r\n  } catch (e) {\r\n    if (e === \"Not Found\") {\r\n      yield put(setLoadingState(LoadingState.NotFound))\r\n    } else yield put(setLoadingState(LoadingState.Error))\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* requestSaga() {\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_ABOUT_ALL_CONTRIES,\r\n    getInfoAboutAllCountriesSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_SHORT_NAME,\r\n    getInfoCountryByShortNameSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_SHORT_FULL_NAME,\r\n    getInfoCountryByFullNameSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_CODE,\r\n    getInfoCountryByCodeSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_CURRENCY,\r\n    getInfoCountryByCurrencySaga\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Box, Typography } from \"@material-ui/core\"\r\nimport { setModalValueInReducer } from \"../../Redux/store/Modal/Modal.action\"\r\nimport { connect } from \"react-redux\"\r\n\r\ntype ModalWindowProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  modalValue: boolean,\r\n  countryForModalWindow: {},\r\n  dispatch: any,\r\n}\r\n\r\nconst ModalWindow: React.FunctionComponent<ModalWindowProps> = ({\r\n  locale,\r\n  fontSize,\r\n  modalValue,\r\n  countryForModalWindow,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <>\r\n      {modalValue && (\r\n        <Box\r\n          component={\"div\"}\r\n          className={`modal__window__container`}\r\n          onClick={(e) => dispatch(setModalValueInReducer(false))}\r\n        >\r\n          <Typography\r\n            variant=\"h4\"\r\n            className={`modal__window__close_text ${\r\n              (fontSize && \"big_font_size\") || \"normal_font_size\"\r\n            }`}\r\n          >\r\n            {(locale === \"En\" && \"Click here to close the modal window\") ||\r\n              \"Кликните здесь что бы закрыть модальное окно\"}\r\n          </Typography>\r\n          <Box\r\n            component={\"div\"}\r\n            className={\"modal__window__container__info\"}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <pre>\r\n              <code\r\n                className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n              >\r\n                {JSON.stringify(countryForModalWindow, null, 2)}\r\n              </code>\r\n            </pre>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  fontSize: state.styles.fontSize,\r\n  modalValue: state.modal.modalValue,\r\n  countryForModalWindow: state.request.countryForModalWindow,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ModalWindow)\r\n","import React from \"react\"\r\nimport { Toolbar, InputBase } from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\n\r\ntype NavbarRequestRenderProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  currentRequestId: number,\r\n  inputValue: string,\r\n  handlerDispatchRequest: any,\r\n  handlerInputSearchBox: any,\r\n}\r\n\r\nconst NavbarRequestRender: React.FunctionComponent<NavbarRequestRenderProps> = ({\r\n  locale,\r\n  fontSize,\r\n  currentRequestId,\r\n  inputValue,\r\n  handlerDispatchRequest,\r\n  handlerInputSearchBox,\r\n}) => {\r\n  return (\r\n    <Toolbar className={\"header__request__container\"}>\r\n      <SearchIcon\r\n        className={\"header__request__container__search_icon\"}\r\n        onClick={() => handlerDispatchRequest()}\r\n      />\r\n      <InputBase\r\n        value={inputValue}\r\n        placeholder={\r\n          (!currentRequestId &&\r\n            ((locale === \"En\" && \"Chose request\") || \"Выберите запрос\")) ||\r\n          (locale === \"En\" && \"Input data\") ||\r\n          \"Введите данные\"\r\n        }\r\n        className={`header__request__container__input ${\r\n          (fontSize && \"big_font_size\") || \"normal_font_size\"\r\n        }`}\r\n        disabled={(!currentRequestId && true) || false}\r\n        onInput={(e) => handlerInputSearchBox(e)}\r\n        onKeyPress={(e) => handlerDispatchRequest(e)}\r\n      />\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nexport default NavbarRequestRender\r\n","import React, { useEffect } from \"react\"\nimport {\n  getInfoAboutAllCountries,\n  getInfoCountryByShortName,\n  getInfoCountryByFullName,\n  getInfoCountryByCode,\n  getInfoCountryByCurrency,\n} from \"../../../Redux/store/Request/Request.action\"\nimport { setInputValueInReducer } from \"../../../Redux/store/Input/Input.action\"\nimport { connect } from \"react-redux\"\nimport NavbarRequestRender from \"./NavbarRequestRender/NavbarRequestRender\"\n\ntype NavbarRequestsProps = {\n  locale: string,\n  fontSize: boolean,\n  currentRequestId: number,\n  inputValue: string,\n  dispatch: any,\n}\n\nconst NavbarRequests: React.FunctionComponent<NavbarRequestsProps> = ({\n  locale,\n  fontSize,\n  currentRequestId,\n  inputValue,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!currentRequestId) dispatch(getInfoAboutAllCountries())\n  }, [currentRequestId, dispatch])\n\n  const handlerInputSearchBox = (e: React.ChangeEvent<any>) => {\n    dispatch(setInputValueInReducer(e.target.value))\n  }\n\n  const handlerDispatchRequest = (e?: React.KeyboardEvent<any>) => {\n    if (!e || e.key === \"Enter\") {\n      switch (currentRequestId) {\n        case 1:\n          dispatch(getInfoCountryByShortName(inputValue))\n          break\n        case 2:\n          dispatch(getInfoCountryByFullName(inputValue))\n          break\n        case 3:\n          dispatch(getInfoCountryByCode(inputValue))\n          break\n        case 4:\n          dispatch(getInfoCountryByCurrency(inputValue))\n          break\n        default:\n          return\n      }\n      dispatch(setInputValueInReducer(\"\"))\n    }\n  }\n\n  return (\n    <NavbarRequestRender\n      locale={locale}\n      fontSize={fontSize}\n      currentRequestId={currentRequestId}\n      inputValue={inputValue}\n      handlerDispatchRequest={handlerDispatchRequest}\n      handlerInputSearchBox={handlerInputSearchBox}\n    />\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  locale: state.locale.locale,\n  fontSize: state.styles.fontSize,\n  currentRequestId: state.request.currentRequestId,\n  inputValue: state.input.inputValue,\n})\n\nexport default connect(mapStateToProps)(NavbarRequests)\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    select: {\r\n      \"&:before\": {\r\n        borderColor: \"white\",\r\n      },\r\n      \"& div\": {\r\n        color: \"white\",\r\n      },\r\n      \"&:after\": {\r\n        borderColor: \"white\",\r\n      },\r\n    },\r\n    icon: {\r\n      fill: \"white\",\r\n    },\r\n  })\r\n)\r\n\r\nexport default useStyles\r\n","import React, { useEffect } from \"react\"\r\nimport { Select, FormControl, MenuItem } from \"@material-ui/core\"\r\nimport useStyles from \"./NavbarMakeStyles\"\r\nimport { setLocaleInReducer } from \"../../../../Redux/store/Locale/Locale.action\"\r\n\r\ntype NavbarVersionLanguageProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  dispatch: any,\r\n}\r\n\r\nconst NavbarVersionLanguage: React.FunctionComponent<NavbarVersionLanguageProps> = ({\r\n  locale,\r\n  fontSize,\r\n  dispatch,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  useEffect(() => {\r\n    const localeStorage = localStorage.getItem(\"locale\")\r\n    if (localeStorage) dispatch(setLocaleInReducer(localeStorage))\r\n  }, [dispatch])\r\n\r\n  const handleChange = (e: any) => {\r\n    dispatch(setLocaleInReducer(e.target.value))\r\n    localStorage.setItem(\"locale\", e.target.value)\r\n  }\r\n\r\n  return (\r\n    <FormControl className={\"header__version__container__Language\"}>\r\n      <Select\r\n        className={`${classes.select} ${\r\n          (fontSize && \"big_font_size\") || \"normal_font_size\"\r\n        }`}\r\n        inputProps={{\r\n          classes: {\r\n            icon: classes.icon,\r\n          },\r\n        }}\r\n        value={locale}\r\n        onChange={(e) => handleChange(e)}\r\n      >\r\n        <MenuItem\r\n          className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n          value={\"En\"}\r\n        >\r\n          En\r\n        </MenuItem>\r\n        <MenuItem\r\n          className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n          value={\"Ru\"}\r\n        >\r\n          Ru\r\n        </MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default NavbarVersionLanguage\r\n","import React from \"react\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\"\r\nimport ZoomOutIcon from \"@material-ui/icons/ZoomOut\"\r\nimport { setFontSizeInStore } from \"../../../../Redux/store/Styles/Styles.action\"\r\n\r\ntype NavbarVersionZoomProps = {\r\n  fontSize: boolean,\r\n  dispatch: any,\r\n}\r\n\r\nconst NavbarVersionZoom: React.FunctionComponent<NavbarVersionZoomProps> = ({\r\n  fontSize,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={() => dispatch(setFontSizeInStore(!fontSize))}\r\n    >\r\n      {(!fontSize && (\r\n        <ZoomInIcon className={\"header__version__container__view\"} />\r\n      )) || <ZoomOutIcon className={\"header__version__container__view\"} />}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default NavbarVersionZoom\r\n","import React from \"react\"\r\nimport { Toolbar } from \"@material-ui/core\"\r\nimport { connect } from \"react-redux\"\r\nimport NavbarVersionLanguage from \"./NavbarVersionLanguage/NavbarVersionLanguage\"\r\nimport NavbarVersionZoom from \"./NavbarVersionZoom/NavbarVersionZoom\"\r\n\r\ntype NavbarVersionProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  dispatch: any,\r\n}\r\n\r\nconst NavbarVersion: React.FunctionComponent<NavbarVersionProps> = ({\r\n  locale,\r\n  fontSize,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <Toolbar className={\"header__version__container\"}>\r\n      <NavbarVersionZoom fontSize={fontSize} dispatch={dispatch} />\r\n      <NavbarVersionLanguage\r\n        locale={locale}\r\n        fontSize={fontSize}\r\n        dispatch={dispatch}\r\n      />\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  fontSize: state.styles.fontSize,\r\n})\r\n\r\nexport default connect(mapStateToProps)(NavbarVersion)\r\n","import React from \"react\"\r\nimport { AppBar } from \"@material-ui/core\"\r\nimport NavbarRequests from \"./NavbarRequests/NavbarRequests\"\r\nimport NavbarVersion from \"./NavbarVersion/NavbarVersion\"\r\n\r\ntype ListRequestsProps = {}\r\n\r\nconst ListRequests: React.FunctionComponent<ListRequestsProps> = () => {\r\n  return (\r\n    <AppBar className={\"header\"}>\r\n      <NavbarRequests />\r\n      <NavbarVersion />\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default ListRequests\r\n","import React from \"react\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport {\r\n  setCurrentRequestIdInStore,\r\n  setInfoAboutCountriesInStore,\r\n} from \"../../../Redux/store/Request/Request.action\"\r\nimport { setLoadingState } from \"../../../Redux/store/Loading/Loading.actions\"\r\nimport { LoadingState } from \"../../../shared/constants/user-from-view-mode.enum\"\r\n\r\ntype CardRequestProps = {\r\n  item: string,\r\n  dispatch: any,\r\n  locale: string,\r\n  id: number,\r\n  currentRequest: boolean,\r\n  fontSize: boolean,\r\n}\r\n\r\nconst CardRequest: React.FunctionComponent<CardRequestProps> = ({\r\n  item,\r\n  dispatch,\r\n  locale,\r\n  id,\r\n  currentRequest,\r\n  fontSize,\r\n}) => {\r\n  return (\r\n    <>\r\n      <ListItem className={`card_request__container`}>\r\n        <Button\r\n          variant={(currentRequest && \"contained\") || \"text\"}\r\n          color=\"primary\"\r\n          onClick={() =>\r\n            dispatch(setCurrentRequestIdInStore(id)) &&\r\n            dispatch(setLoadingState(LoadingState.Loaded)) &&\r\n            id !== 0 &&\r\n            dispatch(setInfoAboutCountriesInStore([]))\r\n          }\r\n          className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n        >\r\n          <Typography variant=\"button\">\r\n            {(locale === \"En\" && \"Name request:\") || \"Имя запроса:\"}\r\n          </Typography>\r\n          <Typography variant=\"h4\">{item}</Typography>\r\n        </Button>\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardRequest\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { List, Box } from \"@material-ui/core\"\r\nimport CardRequest from \"./CardRequest/CardRequest\"\r\n\r\nconst arrayRequests = [\r\n  [\"all\", \"все страны\"],\r\n  [\"name\", \"краткое имя\"],\r\n  [\"fullName\", \"полное имя\"],\r\n  [\"code\", \"код страны\"],\r\n  [\"currency\", \"валюта страны\"],\r\n]\r\n\r\ntype ListRequestsProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  currentRequestId: number,\r\n  dispatch: any,\r\n}\r\n\r\nconst ListRequests: React.FunctionComponent<ListRequestsProps> = ({\r\n  locale,\r\n  fontSize,\r\n  currentRequestId,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <Box component=\"div\" display=\"grid\" className={\"list_request__container\"}>\r\n      <List className={\"list_request__container__list\"}>\r\n        {arrayRequests.map((item: any, index: number) => (\r\n          <CardRequest\r\n            key={index}\r\n            item={(locale === \"En\" && item[0]) || item[1]}\r\n            dispatch={dispatch}\r\n            locale={locale}\r\n            id={index}\r\n            currentRequest={index === currentRequestId}\r\n            fontSize={fontSize}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  fontSize: state.styles.fontSize,\r\n  currentRequestId: state.request.currentRequestId,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ListRequests)\r\n","const arrayClues = [\r\n  [\"Wait!\", \"Ожидайте!\"],\r\n  [\r\n    \"Input short name country please and press enter\",\r\n    \"Введите короткое название страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input full name country please and press enter\",\r\n    \"Введите полное название страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input code country please and press enter\",\r\n    \"Введите код страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input currency country please and press enter\",\r\n    \"Введите валюту страны и нажмите ввод пожалуйста\",\r\n  ],\r\n]\r\n\r\nexport default arrayClues\r\n","import React from \"react\"\r\nimport {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n} from \"@material-ui/core\"\r\nimport { setModalValueInReducer } from \"../../../../Redux/store/Modal/Modal.action\"\r\nimport { setCountryForModalWindow } from \"../../../../Redux/store/Request/Request.action\"\r\nimport { connect } from \"react-redux\"\r\n\r\ntype CardCountriesProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  infoAboutRequestCountry: [],\r\n  item: any,\r\n  index: number,\r\n  dispatch: any,\r\n}\r\n\r\nconst CardCountries: React.FunctionComponent<CardCountriesProps> = ({\r\n  locale,\r\n  fontSize,\r\n  infoAboutRequestCountry,\r\n  item,\r\n  index,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => {\r\n        dispatch(setModalValueInReducer(true)) &&\r\n          dispatch(setCountryForModalWindow(infoAboutRequestCountry[index]))\r\n      }}\r\n      className={\"response__info__container__item\"}\r\n    >\r\n      <ListItemAvatar>\r\n        <Avatar alt={`Avatar}`} src={item.flag} />\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n        primary={item.name}\r\n        secondary={(locale === \"En\" && \"Name country\") || \"Название страны\"}\r\n      />\r\n      <ListItemText\r\n        className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n        primary={`${item.alpha2Code} ${item.alpha3Code}`}\r\n        secondary={(locale === \"En\" && \"Country codes\") || \"Коды страны\"}\r\n      />\r\n      <ListItemText\r\n        className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n        primary={item.currencies[0].code}\r\n        secondary={(locale === \"En\" && \"Country currency\") || \"Валюта страны\"}\r\n      />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  fontSize: state.styles.fontSize,\r\n  infoAboutRequestCountry: state.request.infoAboutRequestCountry,\r\n  loading: state.loading.loadingState,\r\n})\r\n\r\nexport default connect(mapStateToProps)(CardCountries)\r\n","import React from \"react\"\r\nimport { Typography, List, CircularProgress } from \"@material-ui/core\"\r\nimport arrayClues from \"./arrayClues\"\r\nimport CardCountries from \"./CardCountries/CardCountries\"\r\n\r\ntype ListCountriesProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  infoAboutRequestCountry: [],\r\n  currentRequestId: number,\r\n}\r\n\r\nconst ListCountries: React.FunctionComponent<ListCountriesProps> = ({\r\n  locale,\r\n  fontSize,\r\n  infoAboutRequestCountry,\r\n  currentRequestId,\r\n}) => {\r\n  return (\r\n    <List component={\"div\"} className={\"response__info__container\"}>\r\n      {(infoAboutRequestCountry &&\r\n        infoAboutRequestCountry.length > 0 &&\r\n        infoAboutRequestCountry.map((item: any, index: number) => (\r\n          <CardCountries key={index} item={item} index={index} />\r\n        ))) || (\r\n        <>\r\n          <Typography\r\n            variant={\"h4\"}\r\n            className={(fontSize && \"big_font_size\") || \"normal_font_size\"}\r\n          >\r\n            {(locale === \"En\" && arrayClues[currentRequestId][0]) ||\r\n              arrayClues[currentRequestId][1]}\r\n          </Typography>\r\n          {currentRequestId === 0 && (\r\n            <CircularProgress\r\n              color=\"primary\"\r\n              className={\"response__info__spinner\"}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default ListCountries\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Box, Typography, CircularProgress } from \"@material-ui/core\"\r\nimport ListCountries from \"./ListCountries/ListCountries\"\r\n\r\ntype ResponseInfoProps = {\r\n  locale: string,\r\n  fontSize: boolean,\r\n  infoAboutRequestCountry: [],\r\n  currentRequestId: number,\r\n  loading: string,\r\n}\r\n\r\nconst ResponseInfo: React.FunctionComponent<ResponseInfoProps> = ({\r\n  locale,\r\n  fontSize,\r\n  infoAboutRequestCountry,\r\n  currentRequestId,\r\n  loading,\r\n}) => {\r\n  return (\r\n    <>\r\n      {(loading === \"loading\" && (\r\n        <Box component={\"div\"}>\r\n          <CircularProgress\r\n            color=\"primary\"\r\n            className={\"response__info__spinner\"}\r\n          />\r\n        </Box>\r\n      )) ||\r\n        (loading === \"notFound\" && (\r\n          <Typography\r\n            variant={\"h4\"}\r\n            className={`response__info__not_found ${\r\n              (fontSize && \"big_font_size\") || \"normal_font_size\"\r\n            }`}\r\n          >\r\n            {(locale === \"En\" && \"Not found anything on your request\") ||\r\n              \"Ничего не найдено по вашему запросу\"}\r\n          </Typography>\r\n        )) ||\r\n        (loading === \"loaded\" && (\r\n          <ListCountries\r\n            locale={locale}\r\n            fontSize={fontSize}\r\n            infoAboutRequestCountry={infoAboutRequestCountry}\r\n            currentRequestId={currentRequestId}\r\n          />\r\n        )) ||\r\n        (loading === \"error\" && (\r\n          <Typography\r\n            variant=\"h4\"\r\n            className={`response__info__error ${\r\n              (fontSize && \"big_font_size\") || \"normal_font_size\"\r\n            }`}\r\n          >\r\n            {(locale === \"En\" && \"Fault in your request\") ||\r\n              \"Вы отправили некорректный запрос\"}\r\n          </Typography>\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  fontSize: state.styles.fontSize,\r\n  infoAboutRequestCountry: state.request.infoAboutRequestCountry,\r\n  currentRequestId: state.request.currentRequestId,\r\n  loading: state.loading.loadingState,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ResponseInfo)\r\n","import React from \"react\"\nimport \"./App.sass\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport requestSaga from \"./Redux/store/Request/Request.sagas\"\nimport ModalWindow from \"./Components/ModalWindow/ModalWindow\"\nimport Navbar from \"./Components/Navbar/Navbar\"\nimport ListRequests from \"./Components/ListRequests/ListRequests\"\nimport ResponseInfo from \"./Components/ResponseInfo/ResponseInfo\"\nimport Box from \"@material-ui/core/Box\"\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(requestSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <ScopedCssBaseline>\n      <Box component=\"div\" className={\"wrapper\"}>\n        <ModalWindow />\n        <Navbar />\n        <Box component=\"div\" className={\"main\"}>\n          <ListRequests />\n          <ResponseInfo />\n        </Box>\n      </Box>\n    </ScopedCssBaseline>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst rootEl = document.getElementById(\"root\")\nReactDOM.render(<App />, rootEl)\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}