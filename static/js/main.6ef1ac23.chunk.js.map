{"version":3,"sources":["Redux/store/Locale/Locale.action.ts","Redux/store/Locale/Locale.reduser.ts","Redux/store/Request/Request.action.ts","Redux/store/Request/Request.reduser.ts","Redux/store/Input/Input.action.ts","Redux/store/Input/Input.reduser.ts","Redux/store/Modal/Modal.action.ts","Redux/store/Modal/Modal.reduser.ts","Redux/index.ts","services/service-request.ts","Redux/store/Request/Request.sagas.ts","Components/ModalWindow/ModalWindow.tsx","Components/Navbar/NavbarRequests/NavbarRequests.tsx","Components/Navbar/NavbarMakeStyles.tsx","Components/Navbar/NavbarVersion/NavbarVersion.tsx","Components/Navbar/Navbar.tsx","Components/ListRequests/CardRequest/CardRequest.tsx","Components/ListRequests/ListRequests.tsx","Components/ResponseInfo/ResponseInfo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","setLocaleInReducer","locale","type","payload","initialState","setInfoAboutCountriesInStore","listCountries","getFailureAction","error","currentRequestId","infoAboutRequestCountry","countryForModalWindow","setInputValueInReducer","value","inputValue","setModalValueInReducer","modalValue","combineReducers","state","action","request","input","modal","axios","require","ServiceRequest","getInfoAboutAllCountries","a","localStorage","getItem","JSON","parse","get","setItem","stringify","data","console","log","getInfoCountryByShortName","name","getInfoCountryByFullName","getInfoCountryByCode","code","getInfoCountryByCurrency","currency","getInfoAboutAllCountriesSaga","getInfoCountryByShortNameSaga","getInfoCountryByFullNameSaga","getInfoCountryByCodeSaga","getInfoCountryByCurrencySaga","requestSaga","put","actions","takeEvery","connect","dispatch","Box","component","className","onClick","e","Typography","variant","stopPropagation","useEffect","handlerDispatchRequest","key","Toolbar","InputBase","placeholder","disabled","onInput","target","handlerInputSearchBox","onKeyPress","useStyles","makeStyles","theme","createStyles","select","borderColor","color","icon","fill","classes","localeStorage","Button","Cookies","FormControl","Select","inputProps","onChange","handleChange","MenuItem","ListRequests","AppBar","CardRequest","item","id","currentRequest","ListItem","Divider","arrayRequests","display","List","map","index","arrayClues","length","toUpperCase","alpha2Code","alpha3Code","currencies","button","country","ListItemAvatar","Avatar","alt","src","flag","ListItemText","primary","secondary","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","ScopedCssBaseline","Navbar","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6ef1ac23.chunk.js","sourcesContent":["import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_LOCALE_IN_REDUCER: \"[Locale] Set locale in reducer\",\r\n}\r\n\r\nexport const setLocaleInReducer = (locale: string): Action<string> => ({\r\n  type: ActionTypes.SET_LOCALE_IN_REDUCER,\r\n  payload: locale,\r\n})\r\n","import { ActionTypes } from \"./Locale.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  locale: string;\r\n}\r\n\r\nconst initialState: State = {\r\n  locale: \"En\",\r\n}\r\n\r\nexport const localeReducer = (\r\n  state: State = initialState,\r\n  action: Action<string>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_LOCALE_IN_REDUCER:\r\n    return { ...state, locale: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_CURRENT_REQUEST_ID_IN_STORE: \"[Request] Set current request id in store\",\r\n\r\n  GET_INFO_ABOUT_ALL_CONTRIES: \"[Request] Get info about all country\",\r\n  GET_INFO_COUNTRY_BY_SHORT_NAME: \"[Request] Get info country by short name\",\r\n  GET_INFO_COUNTRY_BY_SHORT_FULL_NAME:\r\n    \"[Request] Get info country by full name\",\r\n  // GET_INFO_COUNTRY_BY_SOME_CODES: \"[Request] Get info country by some codes\",\r\n  GET_INFO_COUNTRY_BY_CODE: \"[Request] Get info country by code\",\r\n  GET_INFO_COUNTRY_BY_CURRENCY: \"[Request] Get info country by currency\",\r\n  SET_INFO_ABOUT_CONTRIES_IN_STORE:\r\n    \"[Request] Set info about countries in store\",\r\n\r\n  SET_COUNTRY_FOR_MODAL_WINDOW: '[Request] Set country for modal window',\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const setCurrentRequestIdInStore = (\r\n  requestId: number\r\n): Action<number> => ({\r\n  type: ActionTypes.SET_CURRENT_REQUEST_ID_IN_STORE,\r\n  payload: requestId,\r\n})\r\n\r\n// request on server\r\nexport const getInfoAboutAllCountries = (): Action<{}> => ({\r\n  type: ActionTypes.GET_INFO_ABOUT_ALL_CONTRIES,\r\n})\r\n\r\nexport const getInfoCountryByShortName = (name: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_SHORT_NAME,\r\n  payload: name,\r\n})\r\n\r\nexport const getInfoCountryByFullName = (name: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_SHORT_FULL_NAME,\r\n  payload: name,\r\n})\r\n\r\n// export const getInfoCountryBySomeCodes = (\r\n//   someCodes: string\r\n// ): Action<string> => ({\r\n//   type: ActionTypes.GET_INFO_COUNTRY_BY_SOME_CODES,\r\n//   payload: someCodes,\r\n// })\r\n\r\nexport const getInfoCountryByCode = (code: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_CODE,\r\n  payload: code,\r\n})\r\n\r\nexport const getInfoCountryByCurrency = (currency: string): Action<string> => ({\r\n  type: ActionTypes.GET_INFO_COUNTRY_BY_CURRENCY,\r\n  payload: currency,\r\n})\r\n\r\nexport const setInfoAboutCountriesInStore = (\r\n  listCountries: any\r\n): Action<[]> => ({\r\n  type: ActionTypes.SET_INFO_ABOUT_CONTRIES_IN_STORE,\r\n  payload: listCountries,\r\n})\r\n\r\n//ModalWindow\r\n\r\nexport const setCountryForModalWindow = (\r\n    country: {}\r\n): Action<{}> => ({\r\n  type: ActionTypes.SET_COUNTRY_FOR_MODAL_WINDOW,\r\n  payload: country,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { ActionTypes } from \"./Request.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  currentRequestId: number;\r\n  infoAboutRequestCountry: [];\r\n  countryForModalWindow: {};\r\n}\r\n\r\nconst initialState: State = {\r\n  currentRequestId: 0,\r\n  infoAboutRequestCountry: [],\r\n  countryForModalWindow: {},\r\n}\r\n\r\nexport const requestReducer = (\r\n  state: State = initialState,\r\n  action: Action<any>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_CURRENT_REQUEST_ID_IN_STORE:\r\n    return { ...state, currentRequestId: action.payload }\r\n  case ActionTypes.SET_INFO_ABOUT_CONTRIES_IN_STORE:\r\n    return { ...state, infoAboutRequestCountry: action.payload }\r\n  case ActionTypes.SET_COUNTRY_FOR_MODAL_WINDOW:\r\n    return { ...state, countryForModalWindow: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_INPUT_VALUE_IN_REDUCER: \"[Input] Set input value in reducer\",\r\n}\r\n\r\nexport const setInputValueInReducer = (value: string): Action<string> => ({\r\n  type: ActionTypes.SET_INPUT_VALUE_IN_REDUCER,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Input.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  inputValue: string;\r\n}\r\n\r\nconst initialState: State = {\r\n  inputValue: \"\",\r\n}\r\n\r\nexport const inputReducer = (\r\n  state: State = initialState,\r\n  action: Action<string>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_INPUT_VALUE_IN_REDUCER:\r\n    return { ...state, inputValue: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_MODAL_VALUE_IN_REDUCER: \"[Modal] Set modal value in reducer\",\r\n}\r\n\r\nexport const setModalValueInReducer = (value: boolean): Action<boolean> => ({\r\n  type: ActionTypes.SET_MODAL_VALUE_IN_REDUCER,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Modal.action\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  modalValue: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n  modalValue: false,\r\n}\r\n\r\nexport const modalReducer = (\r\n  state: State = initialState,\r\n  action: Action<boolean>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_MODAL_VALUE_IN_REDUCER:\r\n    return { ...state, modalValue: action.payload }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { localeReducer } from \"./store/Locale/Locale.reduser\"\r\nimport { requestReducer } from \"./store/Request/Request.reduser\"\r\nimport { inputReducer } from \"./store/Input/Input.reduser\"\r\nimport { modalReducer } from \"./store/Modal/Modal.reduser\"\r\n\r\nexport default combineReducers({\r\n  locale: localeReducer,\r\n  request: requestReducer,\r\n  input: inputReducer,\r\n  modal: modalReducer,\r\n})\r\n","import Cookies from \"js-cookie\"\r\nconst axios = require(\"axios\")\r\n\r\nexport default class ServiceRequest {\r\n  static getInfoAboutAllCountries = async () => {\r\n    try {\r\n      if (localStorage.getItem(\"https://restcountries.eu/rest/v2/all\"))\r\n        return JSON.parse(\r\n          localStorage.getItem(\"https://restcountries.eu/rest/v2/all\") || \"[]\"\r\n        )\r\n      else {\r\n        const request = await axios.get(\"https://restcountries.eu/rest/v2/all\")\r\n        localStorage.setItem(\r\n          \"https://restcountries.eu/rest/v2/all\",\r\n          JSON.stringify(request.data)\r\n        )\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByShortName = async (name: string) => {\r\n    try {\r\n      if (localStorage.getItem(`https://restcountries.eu/rest/v2/name/${name}`))\r\n        return JSON.parse(\r\n          localStorage.getItem(\r\n            `https://restcountries.eu/rest/v2/name/${name}`\r\n          ) || \"[]\"\r\n        )\r\n      else {\r\n        const request = await axios.get(\r\n          `https://restcountries.eu/rest/v2/name/${name}`\r\n        )\r\n        localStorage.setItem(\r\n          `https://restcountries.eu/rest/v2/name/${name}`,\r\n          JSON.stringify(request.data)\r\n        )\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByFullName = async (name: string) => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(\r\n          `https://restcountries.eu/rest/v2/name/${name}?fullText=true`\r\n        )\r\n      )\r\n        return JSON.parse(\r\n          localStorage.getItem(\r\n            `https://restcountries.eu/rest/v2/name/${name}?fullText=true`\r\n          ) || \"[]\"\r\n        )\r\n      else {\r\n        const request = await axios.get(\r\n          `https://restcountries.eu/rest/v2/name/${name}?fullText=true`\r\n        )\r\n        localStorage.setItem(\r\n          `https://restcountries.eu/rest/v2/name/${name}?fullText=true`,\r\n          JSON.stringify(request.data)\r\n        )\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  // static getInfoCountryBySomeCodes = async (code: string) => {\r\n  //   try {\r\n  //     // Need make logic these or oi sagas\r\n  //     const request = await axios.get(\r\n  //       `https://restcountries.eu/rest/v2/alpha?codes=${code};${code};${code}`\r\n  //     )\r\n  //     return request.data\r\n  //   } catch (e) {\r\n  //     console.log(e)\r\n  //   }\r\n  // }\r\n\r\n  static getInfoCountryByCode = async (code: string) => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(`https://restcountries.eu/rest/v2/alpha/${code}`)\r\n      )\r\n        return JSON.parse(\r\n          localStorage.getItem(\r\n            `https://restcountries.eu/rest/v2/alpha/${code}`\r\n          ) || \"[]\"\r\n        )\r\n      else {\r\n        const request = await axios.get(\r\n          `https://restcountries.eu/rest/v2/alpha/${code}`\r\n        )\r\n        localStorage.setItem(\r\n          `https://restcountries.eu/rest/v2/alpha/${code}`,\r\n          JSON.stringify(request.data)\r\n        )\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  static getInfoCountryByCurrency = async (currency: string) => {\r\n    try {\r\n      if (\r\n        localStorage.getItem(\r\n          `https://restcountries.eu/rest/v2/currency/${currency}`\r\n        )\r\n      )\r\n        return JSON.parse(\r\n          localStorage.getItem(\r\n            `https://restcountries.eu/rest/v2/currency/${currency}`\r\n          ) || \"[]\"\r\n        )\r\n      else {\r\n        const request = await axios.get(\r\n          `https://restcountries.eu/rest/v2/currency/${currency}`\r\n        )\r\n        localStorage.setItem(\r\n          `https://restcountries.eu/rest/v2/currency/${currency}`,\r\n          JSON.stringify(request.data)\r\n        )\r\n        return request.data\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n}\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport {\r\n  ActionTypes,\r\n  getFailureAction,\r\n  setInfoAboutCountriesInStore,\r\n} from \"./Request.action\"\r\nimport ServiceRequest from \"../../../services/service-request\"\r\n\r\nfunction* getInfoAboutAllCountriesSaga() {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoAboutAllCountries()\r\n\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByShortNameSaga(actions: any) {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoCountryByShortName(\r\n      actions.payload\r\n    )\r\n    console.log(listCountries)\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByFullNameSaga(actions: any) {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoCountryByFullName(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\n// function* getInfoCountryBySomeCodesSaga(actions: any) {\r\n//   try {\r\n//     const listCountries = yield ServiceRequest.getInfoCountryBySomeCodes(\r\n//       actions.payload\r\n//     )\r\n//     yield put(setInfoAboutCountriesInStore(listCountries))\r\n//   } catch (e) {\r\n//     yield put(getFailureAction(e))\r\n//   }\r\n// }\r\n\r\nfunction* getInfoCountryByCodeSaga(actions: any) {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoCountryByCode(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore([listCountries]))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getInfoCountryByCurrencySaga(actions: any) {\r\n  try {\r\n    const listCountries = yield ServiceRequest.getInfoCountryByCurrency(\r\n      actions.payload\r\n    )\r\n    yield put(setInfoAboutCountriesInStore(listCountries))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* requestSaga() {\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_ABOUT_ALL_CONTRIES,\r\n    getInfoAboutAllCountriesSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_SHORT_NAME,\r\n    getInfoCountryByShortNameSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_SHORT_FULL_NAME,\r\n    getInfoCountryByFullNameSaga\r\n  )\r\n  // yield takeEvery(\r\n  //   ActionTypes.GET_INFO_COUNTRY_BY_SOME_CODES,\r\n  //   getInfoCountryBySomeCodesSaga\r\n  // )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_CODE,\r\n    getInfoCountryByCodeSaga\r\n  )\r\n  yield takeEvery(\r\n    ActionTypes.GET_INFO_COUNTRY_BY_CURRENCY,\r\n    getInfoCountryByCurrencySaga\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Box, Typography } from \"@material-ui/core\"\r\nimport { setModalValueInReducer } from \"../../Redux/store/Modal/Modal.action\"\r\nimport { connect } from \"react-redux\"\r\n\r\ntype ModalWindowProps = {\r\n  locale: string,\r\n  modalValue: boolean,\r\n  countryForModalWindow: {},\r\n  dispatch: any,\r\n}\r\n\r\nconst ModalWindow: React.FunctionComponent<ModalWindowProps> = ({\r\n  locale,\r\n  modalValue,\r\n  countryForModalWindow,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <>\r\n      {modalValue && (\r\n        <Box\r\n          component={\"div\"}\r\n          className={\"modal__window__container\"}\r\n          onClick={(e) => dispatch(setModalValueInReducer(false))}\r\n        >\r\n          <Typography variant=\"h6\" className={\"modal__window__close_text\"}>\r\n            {(locale === \"En\" && \"Click here to close the modal window\") ||\r\n              \"Кликните здесь что бы закрыть модальное окно\"}\r\n          </Typography>\r\n          <Box\r\n            component={\"div\"}\r\n            className={\"modal__window__container__info\"}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <pre>\r\n              <code>{JSON.stringify(countryForModalWindow, null, 4)}</code>\r\n            </pre>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  modalValue: state.modal.modalValue,\r\n  countryForModalWindow: state.request.countryForModalWindow,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ModalWindow)\r\n","import React, { useEffect } from \"react\"\nimport { Toolbar, InputBase } from \"@material-ui/core\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport {\n  getInfoAboutAllCountries,\n  getInfoCountryByShortName,\n  getInfoCountryByFullName,\n  // getInfoCountryBySomeCodes,\n  getInfoCountryByCode,\n  getInfoCountryByCurrency,\n} from \"../../../Redux/store/Request/Request.action\"\nimport { setInputValueInReducer } from \"../../../Redux/store/Input/Input.action\"\nimport { connect } from \"react-redux\"\n\ntype NavbarRequestsProps = {\n  locale: string,\n  currentRequestId: number,\n  inputValue: string,\n  dispatch: any,\n}\n\nconst NavbarRequests: React.FunctionComponent<NavbarRequestsProps> = ({\n  locale,\n  currentRequestId,\n  inputValue,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!currentRequestId) dispatch(getInfoAboutAllCountries())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentRequestId === 0, dispatch])\n\n  const handlerInputSearchBox = (e: React.ChangeEvent<any>) => {\n    dispatch(setInputValueInReducer(e.target.value))\n  }\n\n  const handlerDispatchRequest = (e?: React.KeyboardEvent<any>) => {\n    if (!e || e.key === \"Enter\") {\n      switch (currentRequestId) {\n      case 1:\n        dispatch(getInfoCountryByShortName(inputValue))\n        break\n      case 2:\n        dispatch(getInfoCountryByFullName(inputValue))\n        break\n        // case 3:\n        //   dispatch(getInfoCountryBySomeCodes(inputValue))\n        //   break\n      case 3:\n        dispatch(getInfoCountryByCode(inputValue))\n        break\n      case 4:\n        dispatch(getInfoCountryByCurrency(inputValue))\n        break\n      default:\n        return\n      }\n      dispatch(setInputValueInReducer(\"\"))\n    }\n  }\n\n  return (\n    <Toolbar className={\"header__request__container\"}>\n      <SearchIcon\n        className={\"header__request__container__search_icon\"}\n        onClick={() => handlerDispatchRequest()}\n      />\n      <InputBase\n        value={inputValue}\n        placeholder={\n          (!currentRequestId &&\n            ((locale === \"En\" && \"Chose request\") || \"Выберите запрос\")) ||\n          (locale === \"En\" && \"Input data\") ||\n          \"Введите данные\"\n        }\n        className={\"header__request__container__input\"}\n        disabled={(!currentRequestId && true) || false}\n        onInput={(e) => handlerInputSearchBox(e)}\n        onKeyPress={(e) => handlerDispatchRequest(e)}\n      />\n    </Toolbar>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  locale: state.locale.locale,\n  currentRequestId: state.request.currentRequestId,\n  inputValue: state.input.inputValue,\n})\n\nexport default connect(mapStateToProps)(NavbarRequests)\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    select: {\r\n      \"&:before\": {\r\n        borderColor: \"white\",\r\n      },\r\n      \"& div\": {\r\n        color: \"white\",\r\n      },\r\n      \"&:after\": {\r\n        borderColor: \"white\",\r\n      },\r\n    },\r\n    icon: {\r\n      fill: \"white\",\r\n    },\r\n  })\r\n)\r\n\r\nexport default useStyles\r\n","import React, { useEffect } from \"react\"\r\nimport {\r\n  Toolbar,\r\n  Select,\r\n  FormControl,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\"\r\nimport useStyles from \"../NavbarMakeStyles\"\r\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\"\r\nimport { setLocaleInReducer } from \"../../../Redux/store/Locale/Locale.action\"\r\nimport { connect } from \"react-redux\"\r\nimport Cookies from \"js-cookie\"\r\n\r\ntype NavbarVersionProps = {\r\n  locale: string,\r\n  dispatch: any,\r\n}\r\n\r\nconst NavbarVersion: React.FunctionComponent<NavbarVersionProps> = ({\r\n  locale,\r\n  dispatch,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  useEffect(() => {\r\n    const localeStorage = localStorage.getItem(\"locale\")\r\n    if (localeStorage) dispatch(setLocaleInReducer(localeStorage))\r\n  }, [dispatch])\r\n\r\n  const handleChange = (e: any) => {\r\n    dispatch(setLocaleInReducer(e.target.value))\r\n    localStorage.setItem(\"locale\", e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Toolbar className={\"header__version__container\"}>\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        <ZoomInIcon\r\n          className={\"header__version__container__view\"}\r\n          onClick={() => {\r\n            console.log(Cookies.get(\"https://restcountries.eu/rest/v2/all\"))\r\n          }}\r\n        />\r\n      </Button>\r\n      <FormControl className={\"header__version__container__Language\"}>\r\n        <Select\r\n          className={classes.select}\r\n          inputProps={{\r\n            classes: {\r\n              icon: classes.icon,\r\n            },\r\n          }}\r\n          value={locale}\r\n          onChange={(e) => handleChange(e)}\r\n        >\r\n          <MenuItem value={\"En\"}>En</MenuItem>\r\n          <MenuItem value={\"Ru\"}>Ru</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n})\r\n\r\nexport default connect(mapStateToProps)(NavbarVersion)\r\n","import React from \"react\"\r\nimport { AppBar } from \"@material-ui/core\"\r\nimport NavbarRequests from \"./NavbarRequests/NavbarRequests\"\r\nimport NavbarVersion from \"./NavbarVersion/NavbarVersion\"\r\n\r\ntype ListRequestsProps = {}\r\n\r\nconst ListRequests: React.FunctionComponent<ListRequestsProps> = () => {\r\n  return (\r\n    <AppBar className={\"header\"}>\r\n      <NavbarRequests />\r\n      <NavbarVersion />\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default ListRequests\r\n","import React, { useEffect } from \"react\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport {\r\n  setCurrentRequestIdInStore,\r\n  setInfoAboutCountriesInStore,\r\n} from \"../../../Redux/store/Request/Request.action\"\r\n\r\ntype CardRequestProps = {\r\n  item: string,\r\n  dispatch: any,\r\n  locale: string,\r\n  id: number,\r\n  currentRequest: boolean,\r\n}\r\n\r\nconst CardRequest: React.FunctionComponent<CardRequestProps> = ({\r\n  item,\r\n  dispatch,\r\n  locale,\r\n  id,\r\n  currentRequest,\r\n}) => {\r\n  useEffect(() => {}, [])\r\n  return (\r\n    <>\r\n      <ListItem className={`card_request__container`}>\r\n        <Button\r\n          variant={(currentRequest && \"contained\") || \"text\"}\r\n          color=\"primary\"\r\n          onClick={() =>\r\n            dispatch(setCurrentRequestIdInStore(id)) &&\r\n            dispatch(setInfoAboutCountriesInStore([]))\r\n          }\r\n        >\r\n          <Typography variant=\"button\">\r\n            {(locale === \"En\" && \"Name request:\") || \"Имя запроса:\"} {item}\r\n          </Typography>\r\n          {/*<Typography variant=\"h6\">{item}</Typography>*/}\r\n        </Button>\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardRequest\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { List, Box } from \"@material-ui/core\"\r\nimport CardRequest from \"./CardRequest/CardRequest\"\r\n\r\nconst arrayRequests = [\r\n  [\"all\", \"все страны\"],\r\n  [\"name\", \"краткое имя\"],\r\n  [\"fullName\", \"полное имя\"],\r\n  // [\"listOfCode\", \"список кодов\"],\r\n  [\"code\", \"код страны\"],\r\n  [\"currency\", \"валюта страны\"],\r\n]\r\n\r\ntype ListRequestsProps = {\r\n  locale: string,\r\n  currentRequestId: number,\r\n  dispatch: any,\r\n}\r\n\r\nconst ListRequests: React.FunctionComponent<ListRequestsProps> = ({\r\n  locale,\r\n  currentRequestId,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <Box component=\"div\" display=\"grid\" className={\"list_request__container\"}>\r\n      <List className={\"list_request__container__list\"}>\r\n        {arrayRequests.map((item: any, index: number) => (\r\n          <CardRequest\r\n            key={index}\r\n            item={(locale === \"En\" && item[0]) || item[1]}\r\n            dispatch={dispatch}\r\n            locale={locale}\r\n            id={index}\r\n            currentRequest={index === currentRequestId}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  currentRequestId: state.request.currentRequestId,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ListRequests)\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n  Box,\r\n  Typography,\r\n  ListItem,\r\n  List,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n} from \"@material-ui/core\"\r\nimport { setModalValueInReducer } from \"../../Redux/store/Modal/Modal.action\"\r\nimport { setCountryForModalWindow } from \"../../Redux/store/Request/Request.action\"\r\n\r\nconst arrayClues = [\r\n  [\r\n    \"Error application, these must be list all countries\",\r\n    \"Ошибка приложения, здесь должен быть список всех стран\",\r\n  ],\r\n  [\r\n    \"Input short name country please and press enter\",\r\n    \"Введите короткое название страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input full name country please and press enter\",\r\n    \"Введите полное название страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input code country please and press enter\",\r\n    \"Введите код страны и нажмите ввод пожалуйста\",\r\n  ],\r\n  [\r\n    \"Input currency country please and press enter\",\r\n    \"Введите валюту страны и нажмите ввод пожалуйста\",\r\n  ],\r\n]\r\n\r\ntype ResponseInfoProps = {\r\n  locale: string,\r\n  infoAboutRequestCountry: [],\r\n  currentRequestId: number,\r\n  dispatch: any,\r\n}\r\n\r\nconst ResponseInfo: React.FunctionComponent<ResponseInfoProps> = ({\r\n  locale,\r\n  infoAboutRequestCountry,\r\n  currentRequestId,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <List component={\"div\"} className={\"response__info__container\"}>\r\n      {(infoAboutRequestCountry &&\r\n        infoAboutRequestCountry.length > 0 &&\r\n        infoAboutRequestCountry.map(\r\n          (item: any, index: number) =>\r\n            (!currentRequestId && (\r\n              <ListItem\r\n                key={index}\r\n                className={\"response__info__container__item\"}\r\n              >\r\n                <Typography variant=\"subtitle1\">\r\n                  {`${item.name.toUpperCase()};\r\n                   ${item.alpha2Code} ${item.alpha3Code};\r\n                   ${item.currencies[0].code}`}\r\n                </Typography>\r\n              </ListItem>\r\n            )) || (\r\n              <ListItem\r\n                key={index}\r\n                button\r\n                onClick={() => {\r\n                  dispatch(setModalValueInReducer(true)) &&\r\n                    dispatch(\r\n                      setCountryForModalWindow(infoAboutRequestCountry[index])\r\n                    )\r\n                }}\r\n                className={\"response__info__container__item\"}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Avatar alt={`Avatar}`} src={item.flag} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={item.name}\r\n                  secondary={\r\n                    (locale === \"En\" && \"Name country\") || \"Название страны\"\r\n                  }\r\n                />\r\n                <ListItemText\r\n                  primary={`${item.alpha2Code} ${item.alpha3Code}`}\r\n                  secondary={\r\n                    (locale === \"En\" && \"Country codes\") || \"Коды страны\"\r\n                  }\r\n                />\r\n                <ListItemText\r\n                  primary={item.currencies[0].code}\r\n                  secondary={\r\n                    (locale === \"En\" && \"Country currency\") || \"Валюта страны\"\r\n                  }\r\n                />\r\n              </ListItem>\r\n            )\r\n        )) || (\r\n        <Box component={\"div\"}>\r\n          {(locale === \"En\" && arrayClues[currentRequestId][0]) ||\r\n            arrayClues[currentRequestId][1]}\r\n        </Box>\r\n      )}\r\n    </List>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  locale: state.locale.locale,\r\n  infoAboutRequestCountry: state.request.infoAboutRequestCountry,\r\n  currentRequestId: state.request.currentRequestId,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ResponseInfo)\r\n","import React from \"react\"\nimport \"./App.sass\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport requestSaga from \"./Redux/store/Request/Request.sagas\"\nimport ModalWindow from \"./Components/ModalWindow/ModalWindow\"\nimport Navbar from \"./Components/Navbar/Navbar\"\nimport ListRequests from \"./Components/ListRequests/ListRequests\"\nimport ResponseInfo from \"./Components/ResponseInfo/ResponseInfo\"\nimport Box from \"@material-ui/core/Box\"\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(requestSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <ScopedCssBaseline>\n      <Box component=\"div\" className={\"wrapper\"}>\n        <ModalWindow />\n        <Navbar />\n        <Box component=\"div\" className={\"main\"}>\n          <ListRequests />\n          <ResponseInfo />\n        </Box>\n      </Box>\n    </ScopedCssBaseline>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst rootEl = document.getElementById(\"root\")\nReactDOM.render(<App />, rootEl)\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}